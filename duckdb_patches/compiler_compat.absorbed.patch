diff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp
index e650d79beb..99420fffbd 100644
--- a/src/common/local_file_system.cpp
+++ b/src/common/local_file_system.cpp
@@ -29,6 +29,7 @@
 #ifdef __MINGW32__
 // need to manually define this for mingw
 extern "C" WINBASEAPI BOOL WINAPI GetPhysicallyInstalledSystemMemory(PULONGLONG);
+extern "C" WINBASEAPI BOOL QueryFullProcessImageNameW(HANDLE, DWORD, LPWSTR, PDWORD);
 #endif
 
 #undef FILE_CREATE // woo mingw
diff --git a/src/common/types/row/tuple_data_allocator.cpp b/src/common/types/row/tuple_data_allocator.cpp
index cb6f0bb182..02283b12a6 100644
--- a/src/common/types/row/tuple_data_allocator.cpp
+++ b/src/common/types/row/tuple_data_allocator.cpp
@@ -13,7 +13,7 @@ TupleDataBlock::TupleDataBlock(BufferManager &buffer_manager, idx_t capacity_p)
 	buffer_manager.Allocate(MemoryTag::HASH_TABLE, capacity, false, &handle);
 }
 
-TupleDataBlock::TupleDataBlock(TupleDataBlock &&other) noexcept {
+TupleDataBlock::TupleDataBlock(TupleDataBlock &&other) noexcept : capacity(0), size(0) {
 	std::swap(handle, other.handle);
 	std::swap(capacity, other.capacity);
 	std::swap(size, other.size);
diff --git a/src/common/types/vector.cpp b/src/common/types/vector.cpp
index aa08072ac5..7730a0c5af 100644
--- a/src/common/types/vector.cpp
+++ b/src/common/types/vector.cpp
@@ -30,7 +30,7 @@ namespace duckdb {
 UnifiedVectorFormat::UnifiedVectorFormat() : sel(nullptr), data(nullptr) {
 }
 
-UnifiedVectorFormat::UnifiedVectorFormat(UnifiedVectorFormat &&other) noexcept {
+UnifiedVectorFormat::UnifiedVectorFormat(UnifiedVectorFormat &&other) noexcept : sel(nullptr), data(nullptr) {
 	bool refers_to_self = other.sel == &other.owned_sel;
 	std::swap(sel, other.sel);
 	std::swap(data, other.data);
diff --git a/src/core_functions/aggregate/distributive/arg_min_max.cpp b/src/core_functions/aggregate/distributive/arg_min_max.cpp
index c39b059996..6feffca464 100644
--- a/src/core_functions/aggregate/distributive/arg_min_max.cpp
+++ b/src/core_functions/aggregate/distributive/arg_min_max.cpp
@@ -164,7 +164,7 @@ struct ArgMinMaxBase {
 		if (!state.is_initialized || state.arg_null) {
 			finalize_data.ReturnNull();
 		} else {
-			STATE::template ReadValue(finalize_data.result, state.arg, target);
+			STATE::template ReadValue<T>(finalize_data.result, state.arg, target);
 		}
 	}
 
@@ -248,7 +248,7 @@ struct VectorArgMinMaxBase : ArgMinMaxBase<COMPARATOR, IGNORE_NULL> {
 			return;
 		}
 		if (!target.is_initialized || COMPARATOR::Operation(source.value, target.value)) {
-			STATE::template AssignValue(target.value, source.value);
+			STATE::template AssignValue<typename STATE::BY_TYPE>(target.value, source.value);
 			AssignVector(target, *source.arg, source.arg_null, 0);
 			target.is_initialized = true;
 		}
diff --git a/src/core_functions/aggregate/distributive/bitagg.cpp b/src/core_functions/aggregate/distributive/bitagg.cpp
index 2d57a4f548..af3056359a 100644
--- a/src/core_functions/aggregate/distributive/bitagg.cpp
+++ b/src/core_functions/aggregate/distributive/bitagg.cpp
@@ -53,10 +53,10 @@ struct BitwiseOperation {
 	template <class INPUT_TYPE, class STATE, class OP>
 	static void Operation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &) {
 		if (!state.is_set) {
-			OP::template Assign(state, input);
+			OP::template Assign<INPUT_TYPE>(state, input);
 			state.is_set = true;
 		} else {
-			OP::template Execute(state, input);
+			OP::template Execute<INPUT_TYPE>(state, input);
 		}
 	}
 
@@ -79,10 +79,10 @@ struct BitwiseOperation {
 		}
 		if (!target.is_set) {
 			// target is NULL, use source value directly.
-			OP::template Assign(target, source.value);
+			OP::template Assign<typename STATE::TYPE>(target, source.value);
 			target.is_set = true;
 		} else {
-			OP::template Execute(target, source.value);
+			OP::template Execute<typename STATE::TYPE>(target, source.value);
 		}
 	}
 
diff --git a/src/core_functions/aggregate/distributive/minmax.cpp b/src/core_functions/aggregate/distributive/minmax.cpp
index d3a5dd49c6..0e40b45d05 100644
--- a/src/core_functions/aggregate/distributive/minmax.cpp
+++ b/src/core_functions/aggregate/distributive/minmax.cpp
@@ -487,7 +487,7 @@ struct VectorMinMaxBase {
 			if (!state.value) {
 				Assign(state, input, i);
 			} else {
-				OP::template Execute(state, input, i, count);
+				OP::template Execute<STATE>(state, input, i, count);
 			}
 		}
 	}
@@ -499,7 +499,7 @@ struct VectorMinMaxBase {
 		} else if (!target.value) {
 			Assign(target, *source.value, 0);
 		} else {
-			OP::template Execute(target, *source.value, 0, 1);
+			OP::template Execute<STATE>(target, *source.value, 0, 1);
 		}
 	}
 
diff --git a/src/execution/window_executor.cpp b/src/execution/window_executor.cpp
index 4d6b9b099c..e649ff2efb 100644
--- a/src/execution/window_executor.cpp
+++ b/src/execution/window_executor.cpp
@@ -193,7 +193,7 @@ private:
 template <typename T, typename OP>
 struct OperationCompare : public std::function<bool(T, T)> {
 	inline bool operator()(const T &lhs, const T &val) const {
-		return OP::template Operation(lhs, val);
+		return OP::template Operation<T>(lhs, val);
 	}
 };
 
diff --git a/src/include/duckdb/common/arrow/arrow_buffer.hpp b/src/include/duckdb/common/arrow/arrow_buffer.hpp
index e1624ef64d..66dd863f7e 100644
--- a/src/include/duckdb/common/arrow/arrow_buffer.hpp
+++ b/src/include/duckdb/common/arrow/arrow_buffer.hpp
@@ -32,7 +32,7 @@ struct ArrowBuffer {
 	ArrowBuffer(const ArrowBuffer &other) = delete;
 	ArrowBuffer &operator=(const ArrowBuffer &) = delete;
 	//! enable move constructors
-	ArrowBuffer(ArrowBuffer &&other) noexcept {
+	ArrowBuffer(ArrowBuffer &&other) noexcept : count(0), capacity(0) {
 		std::swap(dataptr, other.dataptr);
 		std::swap(count, other.count);
 		std::swap(capacity, other.capacity);
diff --git a/src/include/duckdb/function/scalar/regexp.hpp b/src/include/duckdb/function/scalar/regexp.hpp
index 1b33d3c77f..fa6a3e91f8 100644
--- a/src/include/duckdb/function/scalar/regexp.hpp
+++ b/src/include/duckdb/function/scalar/regexp.hpp
@@ -106,9 +106,12 @@ struct RegexStringPieceArgs {
 	}
 
 	RegexStringPieceArgs &operator=(RegexStringPieceArgs &&other) noexcept {
-		std::swap(this->size, other.size);
-		std::swap(this->capacity, other.capacity);
-		std::swap(this->group_buffer, other.group_buffer);
+		this->size = other.size;
+		this->capacity = other.capacity;
+		this->group_buffer = other.group_buffer;
+		other.size = 0;
+		other.capacity = 0;
+		other.group_buffer = nullptr;
 		return *this;
 	}
 
diff --git a/src/storage/buffer/buffer_handle.cpp b/src/storage/buffer/buffer_handle.cpp
index dc3be3f284..21226eb685 100644
--- a/src/storage/buffer/buffer_handle.cpp
+++ b/src/storage/buffer/buffer_handle.cpp
@@ -11,7 +11,7 @@ BufferHandle::BufferHandle(shared_ptr<BlockHandle> handle_p, FileBuffer *node_p)
     : handle(std::move(handle_p)), node(node_p) {
 }
 
-BufferHandle::BufferHandle(BufferHandle &&other) noexcept {
+BufferHandle::BufferHandle(BufferHandle &&other) noexcept : node(nullptr) {
 	std::swap(node, other.node);
 	std::swap(handle, other.handle);
 }
